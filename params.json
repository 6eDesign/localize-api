{"name":"LOCALIZE","tagline":"\"localize\" external API's and cache them for awhile","body":"## localize-api\r\nI needed a way to have more control over external API's as well as keep the REST API functionality. This module allows you to localize external API's along with a simple cache layer/garbarge collection utilizing [`nedb`](https://github.com/louischatriot/nedb), I plan to build in [`mongodb`](https://github.com/mongodb/node-mongodb-native) as well. \r\n\r\n![](https://nodei.co/npm/localize-api.png?downloads=true&stars=true) \r\n\r\n![](https://badge.fury.io/js/localize-api.png)\r\n\r\n![](https://drone.io/github.com/dhigginbotham/localize-api/status.png)\r\n\r\n### Features\r\n- express api mount/router for external resources\r\n- 100% coffeescript, hate it or love it\r\n- negates the whole clientside `cors` issue for some people by using request, and localizes to a RESTful route\r\n- If you're using cache it's going to help avoid making a lot of chatty calls to an API, especially if you're doing a lot of paging eg:\r\n  \r\n  ```\r\n  GET /github/users/dhigginbotham/following?per_page=300 200 605ms\r\n  GET /github/users/dhigginbotham/following?per_page=300 304 24ms\r\n  ```\r\n\r\n### Installation\r\n```md\r\nnpm install localize-api --save\r\n```\r\n\r\nYou'll also need CoffeeScript, it's easy though: `npm install coffeescript -g`\r\n\r\n## Full Example w/ Express, and options\r\nThis example depends on having [`express.js`](https://github.com/visionmedia/express) and [`nedb`](https://github.com/louischatriot/nedb) available:\r\n\r\n  `npm install express nedb --save`\r\n\r\n```js\r\nvar express = require('express');\r\nvar app = express();\r\n\r\nvar server = require(\"http\").createServer(app);\r\n\r\nvar path = require('path');\r\nvar DataStore = require('nedb');\r\nvar localize = require('localize-api');\r\n\r\napp.set('port', 1337);\r\napp.use(express.bodyParser());\r\napp.use(express.methodOverride());\r\n\r\n// simple example\r\nvar github = new localize();\r\n\r\ngithub.mount(app);\r\n\r\n// full example\r\nvar ds = new DataStore({\r\n  filename: path.join(__dirname, 'db', 'fileStorage.db');\r\n});\r\n\r\nvar customRoute = function (req, res) {\r\n  res.send(req.__coderbits);\r\n};\r\n\r\nvar middleOne = function (req, res, next) {\r\n  console.log(\"I am the middleOne middleware :)\");\r\n  next();\r\n};\r\n\r\nvar middleTwo = function (req, res, next) {\r\n  console.log(\"I am the middleTwo middleware :) :)\");\r\n  next();\r\n};\r\n\r\nvar coderbitsOpts = {\r\n  path: 'coderbits',\r\n  uri: 'https://coderbits.com',\r\n  customKey: '__coderbits',\r\n  stale: '5m',\r\n  cache: true,\r\n  ds: ds,\r\n  middleware: [middleOne, middleTwo],\r\n  customRoute: customRoute\r\n};\r\n\r\nvar coderbits = new localize(coderbitsOpts);\r\n\r\ncoderbits.mount(app);\r\n\r\nserver.listen(app.get('port'), function () {\r\n  console.log('listening on port ' + app.get('port'));\r\n});\r\n\r\n// GET http://localhost:1337/coderbits/dhz.json\r\n```\r\n\r\n### Options\r\nName | Defaults | Info\r\n--- | --- | ---\r\n`accepted` | `['post', 'put', 'delete', 'get']` | accepted methods to run external requests against, expects an array\r\n`cache` | `false` | uses [`nedb`](https://github.com/louischatriot/nedb) currently, still finishing `mongodb`\r\n`customKey` | `path` | defaults to your path string, for instance if your path was 'github', `req.github` would be set \r\n`customRoute` | `null` | allows you to pass a custom route through as your endpoint, helpful if you want to use the output to template a file\r\n`ds` | `DataStore` | you'll get one of these from [`nedb`](https://github.com/louischatriot/nedb)\r\n`locals` | `false` | if `true` it will set `res.locals[customKey]` as well as `req[customKey]`\r\n`middleware` | `[]` | allows you to add custom middleware to your api, good for authentication/ensureLogin etc\r\n`path` | `github` | defaults to `github` which is the default api to get this going quickly\r\n`stale` | `1m` | uses `ms` module for ez times eg: `1s, 1m, 5m, 1h, 10h, 1d, etc`\r\n`uri` | `https://api.github.com` | api path to localize\r\n\r\n\r\n### License\r\n```md\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 David Higginbotham \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}